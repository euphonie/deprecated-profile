{"version":3,"file":"static/js/546.be9a091c.chunk.js","mappings":"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","sources":["components/dialogs/ProjectsDialog.tsx","components/experience/TechStackBox.tsx","components/experience/ProjectsBox.tsx","components/experience/ResponsabilitiesBox.tsx","components/ExperienceTimeline.tsx","pages/MyWork.tsx"],"sourcesContent":["import Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { ProjectsDialogProps } from '../../common/types';\nimport theme from '../../resources/theme/CustomTheme.d';\nimport ThemeProvider from '@mui/material/styles/ThemeProvider';\n\nexport const ProjectsDialog = (props: ProjectsDialogProps) => {\n    return (\n        <ThemeProvider theme={theme}>\n            <Dialog\n                maxWidth=\"md\"\n                onClose={props.handleClose}\n                aria-labelledby=\"customized-dialog-title\"\n                open={props.open}\n                sx={{ \n                    backgorundColor: 'secondary.main'\n                }}\n            >\n                <DialogTitle\n                    variant=\"h6\"\n                    sx={{\n                        m: 0,\n                        p: 2,\n                        backgroundColor: 'accent.main',\n                        color: 'secondary.main',\n                    }}\n                >\n                    {props.activeProject?.name ?? ''}\n                    <IconButton\n                        aria-label=\"close\"\n                        onClick={props.handleClose}\n                        sx={{\n                            position: 'absolute',\n                            right: 8,\n                            top: 8,\n                            color: 'secondary.main'\n                        }}\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </DialogTitle>\n                <DialogContent\n                    sx={{ \n                        color: 'white.main',\n                        backgroundColor: 'secondary.main',\n                        height: '28rem',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        gap: '0.5rem'\n                    }}\n                >\n                    {props.children}\n                </DialogContent>\n            </Dialog>\n        </ThemeProvider>\n    );\n};\n","import List from '@mui/material/List/List';\nimport { TechStackBoxProps, TechStackOption } from '../../common/types';\nimport Icon from '@mui/material/Icon/Icon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport ThemeProvider from '@mui/material/styles/ThemeProvider';\nimport theme from '../../resources/theme/CustomTheme.d';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport useMediaQuery from '@mui/material/useMediaQuery/useMediaQuery';\n\nexport const TechStackBox = (props: TechStackBoxProps) => {\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    let technologies = props.technologies;\n    if (!props.showComplete){\n        technologies = [\n            ...props.technologies.slice(0, 5), \n            {\n                \"class\": 'more',\n                \"label\": 'See others',\n                \"useCustom\": true\n            }\n        ];\n    }\n\n    const renderIcon = (techOption: TechStackOption) => {\n        if (techOption.useCustom){\n            const imgExtension = 'svg';\n            return <img\n                style={{\n                    width: '100%',\n                    height: '100%',\n                    color: 'white'\n                }}\n                src={`/tech/${techOption.class}.${imgExtension}`}\n                alt={techOption.label}\n                loading=\"lazy\"\n            />;\n        } else {\n            return <i className={`devicon-${techOption.class} colored`}></i>;\n        }\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <List\n                sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: '1rem', flexBasis: 'auto' }}\n            >\n                {technologies.map((tech: TechStackOption, i: number) => {\n                    return (\n                        <ListItemIcon\n                            key={i}\n                            color=\"white\"\n                            aria-details={tech.label}\n                            sx={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                marginTop: '0',\n                                alignItems: 'center',\n                                backgroundColor: props.showComplete ? 'white.main' : 'transparent',\n                                borderRadius: '4px',\n                                padding: '4px',\n                                flexGrow: '1'\n                            }}\n                        >\n                            <Icon sx={{fontSize: isMobile ?  '1.5rem' : '2rem', overflow: 'revert'}}>\n                                { renderIcon(tech) }\n                            </Icon>\n                            {\n                                props.showComplete ? \n                                    <ListItemText sx={{fontSize: isMobile ? '0.8rem' : 'inherit'}}>{tech.label}</ListItemText>\n                                    : null\n                            }\n                        </ListItemIcon>\n                    );\n                })}\n            </List>\n        </ThemeProvider>\n    );\n};\n","import Box from '@mui/material/Box/Box';\nimport Button from '@mui/material/Button/Button';\nimport Typography from '@mui/material/Typography/Typography';\nimport { useTranslation } from 'react-i18next';\nimport { JobProject, ProjectBoxProps } from '../../common/types';\nimport SplitscreenOutlinedIcon from '@mui/icons-material/SplitscreenOutlined';\nimport { useState } from 'react';\nimport { ProjectsDialog } from '../dialogs/ProjectsDialog';\nimport moment from 'moment';\nimport { TechStackBox } from './TechStackBox';\nimport Replay30Icon from '@mui/icons-material/Replay30';\nimport useMediaQuery from '@mui/material/useMediaQuery/useMediaQuery';\nimport theme from '../../resources/theme/CustomTheme.d';\nimport Grid from '@mui/material/Grid/Grid';\nimport ListItem from '@mui/material/ListItem/ListItem';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport List from '@mui/material/List/List';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport AssignmentTurnedInIcon from '@mui/icons-material/AssignmentTurnedIn';\n\nexport const ProjectsBox = (props: ProjectBoxProps) => {\n    const { t } = useTranslation();\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const [activeProject, setActiveProject] = useState<JobProject>();\n    const [isProjectModalOpen, setProjectModalOpen] = useState<boolean>(false);\n\n    const handleProjectModalOpen = (project: JobProject) => {\n        setActiveProject(project);\n        setProjectModalOpen(true);\n    };\n\n    const handleProjectModalClose = (_evt: any) => {\n        setProjectModalOpen(false);\n    };\n\n    return (\n        <Box component=\"div\">\n            <Typography\n                variant=\"h6\"\n                textAlign=\"left\"\n                component=\"span\"\n                sx={{\n                    display: 'flex',\n                    gap: '0.8rem',\n                    alignItems: 'center',\n                }}\n            >\n                <SplitscreenOutlinedIcon />\n                {t('projects.title')}\n            </Typography>\n            <Box\n                component=\"div\"\n                sx={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}\n            >\n                {props.job.projects.map((project: JobProject, i: number) => {\n                    return (\n                        <Button\n                            key={i}\n                            size=\"large\"\n                            variant=\"outlined\"\n                            color=\"white\"\n                            onClick={(_evt) => handleProjectModalOpen(project)}\n                            sx={{\n                                padding: '20px',\n                                marginTop: '20px',\n                                display: 'flex',\n                                flexDirection: 'column',\n                                flexWrap: 'wrap',\n                                flex: isMobile ? '100%' : '33%',\n                            }}\n                        >\n                            {project.name}\n\n                            <TechStackBox\n                                showComplete={false}\n                                technologies={project.techStack ?? []}\n                            />\n                        </Button>\n                    );\n                })}\n            </Box>\n            <ProjectsDialog\n                open={isProjectModalOpen}\n                activeProject={activeProject}\n                handleClose={handleProjectModalClose}\n            >\n                <Grid container>\n                    <Grid item xs={12} sm={12} md={8} p={2}>\n                        <Typography\n                            variant=\"overline\"\n                            textAlign={isMobile ? 'center' : 'inherit'}\n                        >\n                            <span>{`${moment(activeProject?.startDate).format(\n                                'MM/YYYY'\n                            )} - ${moment(activeProject?.endDate).format(\n                                'MM/YYYY'\n                            )}`}</span>\n                        </Typography>\n                        {activeProject?.multipleReleases ? (\n                            <Typography\n                                sx={{\n                                    fontStyle: 'italic',\n                                    alignItems: 'right',\n                                    backgroundColor: 'fadedAccent.main',\n                                    borderRadius: '5px',\n                                    display: 'flex',\n                                    justifyContent: 'center',\n                                    flexDirection: 'row',\n                                    gap: '1rem',\n                                }}\n                            >\n                                {t('projects.dialog.multipleReleasesLabel')}\n                                <Replay30Icon />\n                            </Typography>\n                        ) : null}\n                        <Typography sx={{ fontSize: '0.8rem' }}>\n                            {activeProject?.description ?? ''}\n                        </Typography>\n                        <Typography\n                            variant=\"h5\"\n                            sx={{\n                                fontSize: isMobile ? '0.8rem' : 'inherit',\n                                marginTop: '10px',\n                            }}\n                        >\n                            {t('projects.dialog.outcomeLabel')}\n                        </Typography>\n                        <List dense disablePadding>\n                            {activeProject?.outcomes.map(\n                                (outcome: string, i: number) => {\n                                    return (\n                                        <ListItem key={i}>\n                                            <ListItemIcon>\n                                                <AssignmentTurnedInIcon color=\"white\" />\n                                            </ListItemIcon>\n                                            <ListItemText>\n                                                <Typography\n                                                    sx={{ fontSize: '0.8rem' }}\n                                                >\n                                                    {outcome}\n                                                </Typography>\n                                            </ListItemText>\n                                        </ListItem>\n                                    );\n                                }\n                            )}\n                        </List>\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={4} p={2}>\n                        <TechStackBox\n                            showComplete={true}\n                            technologies={activeProject?.techStack ?? []}\n                        />\n                    </Grid>\n                </Grid>\n            </ProjectsDialog>\n        </Box>\n    );\n};\n","import AssignmentIcon from '@mui/icons-material/Assignment';\nimport TaskAltOutlinedIcon from '@mui/icons-material/TaskAltOutlined';\nimport Box from \"@mui/material/Box/Box\";\nimport List from '@mui/material/List/List';\nimport ListItem from '@mui/material/ListItem/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport Typography from \"@mui/material/Typography/Typography\";\nimport { useTranslation } from 'react-i18next';\nimport { ResponsabilitiesBoxProps } from '../../common/types';\n\nexport const ResponsabilitiesBox = (props: ResponsabilitiesBoxProps) => {\n    const { t } = useTranslation();\n\n    return (\n        <Box component=\"div\">\n            <Typography\n                textAlign=\"left\"\n                variant=\"h6\"\n                component=\"span\"\n                sx={{\n                    display: 'flex',\n                    gap: '0.8rem',\n                    alignItems: 'center',\n                }}\n            >\n                <AssignmentIcon color=\"white\" />\n                {t('mywork.journey.responsabilities')}\n            </Typography>\n            <Typography\n                variant=\"caption\"\n                component=\"span\"\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: '1rem',\n                    marginTop: '5px',\n                }}\n            >\n                <List dense={true}>\n                    {props.job.responsabilities.map((task: string, i: number) => {\n                        return (\n                            <ListItem key={i}>\n                                <ListItemIcon>\n                                    <TaskAltOutlinedIcon color=\"white\" />\n                                </ListItemIcon>\n                                <ListItemText>{task}</ListItemText>\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </Typography>\n        </Box>\n    );\n};\n","import Timeline from '@mui/lab/Timeline/Timeline';\nimport TimelineItem from '@mui/lab/TimelineItem/TimelineItem';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator/TimelineSeparator';\nimport TimelineContent from '@mui/lab/TimelineContent/TimelineContent';\nimport TimelineOppositeContent from '@mui/lab/TimelineOppositeContent/TimelineOppositeContent';\nimport TimelineDot from '@mui/lab/TimelineDot/TimelineDot';\nimport EngineeringIcon from '@mui/icons-material/Engineering';\nimport LaptopMacIcon from '@mui/icons-material/LaptopMac';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport WorkspacesIcon from '@mui/icons-material/Workspaces';\nimport Typography from '@mui/material/Typography';\nimport mywork from '../config/mywork.json';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport Box from '@mui/material/Box/Box';\nimport theme from '../resources/theme/CustomTheme.d';\nimport Paper from '@mui/material/Paper/Paper';\nimport { AnimateWhenVisible } from './animations/AnimateWhenVisible';\nimport { ProjectsBox } from './experience/ProjectsBox';\nimport { Job } from '../common/types';\nimport { ResponsabilitiesBox } from './experience/ResponsabilitiesBox';\nimport useMediaQuery from '@mui/material/useMediaQuery/useMediaQuery';\n\nexport default function ExperienceTimeline() {\n    const { t } = useTranslation();\n    const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n\n    return (\n        <Timeline position={isMobile ? 'right' : 'alternate'}>\n            <Typography sx={{ textAlign: 'center' }} variant=\"h5\">\n                {t('mywork.journey.title')}\n            </Typography>\n            <Box component=\"div\" m={2}>\n                {mywork.work.map((job: Job, i: number) => {\n                    const sDate = moment(job.startDate);\n                    const eDate = moment(job.endDate);\n                    const monthDuration = eDate.diff(sDate, 'months') % 12;\n                    const yearDuration = eDate.diff(sDate, 'years');\n\n                    return (\n                        <TimelineItem \n                          key={i}\n                          sx={{ \n                            flexDirection: isMobile ? 'column' : 'inherit',\n                            alignItems: isMobile ? 'center' : 'inherit' \n                          }}\n                        >\n                            <TimelineOppositeContent\n                                sx={{\n                                    m: 'auto 0',\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    fontWeight: '600'\n                                }}\n                                variant=\"h6\"\n                                color=\"text.secondary\"\n                            >\n                                  <span>{`${sDate.format(\n                                      'MM/YYYY'\n                                  )} - ${eDate.format('MM/YYYY')}`}</span>\n                                  <span>{`(~${yearDuration} years ${monthDuration} Months)`}</span>\n                            </TimelineOppositeContent>\n                            <TimelineSeparator>\n                                <TimelineDot\n                                    color=\"primary\"\n                                    sx={{ borderRadius: '2px' }}\n                                >\n                                    {job.icon === 'leadership' ? (\n                                        <PersonOutlineIcon />\n                                    ) : (\n                                        <LaptopMacIcon />\n                                    )}\n                                </TimelineDot>\n                            </TimelineSeparator>\n                            <TimelineContent\n                                sx={{\n                                    py: '12px',\n                                    px: 2\n                                }}\n                            >\n                                <AnimateWhenVisible animation=\"fadeTop\">\n                                    <Paper\n                                        sx={{\n                                            padding: '30px',\n                                            backgroundColor: '#596F62',\n                                            color: theme.palette.white.main,\n                                            borderColor: 'secondary',\n                                            borderStyle: 'solid',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            gap: '1rem'\n                                        }}\n                                    >\n                                        <Typography\n                                            textAlign=\"left\"\n                                            variant=\"h5\"\n                                            component=\"span\"\n                                            sx={{\n                                                display: 'flex',\n                                                gap: '0.8rem',\n                                                alignItems: 'center',\n                                            }}\n                                        >\n                                            <EngineeringIcon color=\"white\" />\n                                            {job.position}\n                                        </Typography>\n                                        <Typography\n                                            textAlign=\"left\"\n                                            variant=\"body2\"\n                                            component=\"span\"\n                                            sx={{\n                                                display: 'flex',\n                                                gap: '0.8rem',\n                                                alignItems: 'center',\n                                            }}\n                                        >\n                                            <BusinessIcon color=\"white\" />\n                                            {job.company}\n                                        </Typography>\n                                        <Typography\n                                            textAlign=\"left\"\n                                            variant=\"body2\"\n                                            component=\"span\"\n                                            sx={{\n                                                display: 'flex',\n                                                gap: '0.8rem',\n                                                alignItems: 'center',\n                                            }}\n                                        >\n                                            <WorkspacesIcon color=\"white\" />\n                                            {`${t('mywork.journey.team')}: ${\n                                                job.team\n                                            }`}\n                                        </Typography>\n                                        <ResponsabilitiesBox job={job} />\n                                        <ProjectsBox job={job} />\n                                    </Paper>\n                                </AnimateWhenVisible>\n                            </TimelineContent>\n                        </TimelineItem>\n                    );\n                })}\n            </Box>\n        </Timeline>\n    );\n}\n","import Container from '@mui/material/Container/Container';\nimport Grid from '@mui/material/Grid/Grid';\nimport useMediaQuery from '@mui/material/useMediaQuery/useMediaQuery';\nimport ExperienceTimeline from '../components/ExperienceTimeline';\nimport stackedBG from '../resources/img/stacked-waves-haikei.webp';\nimport theme from '../resources/theme/CustomTheme.d';\n\nexport default function MyWork() {\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    return (\n        <Container\n            disableGutters\n            maxWidth={false}\n            sx={{\n                backgroundImage: `url(${stackedBG})`,\n                backgroundSize: isMobile ? 'auto' : 'contain',\n            }}\n        >\n            <Grid\n                container\n            >\n                <Grid item xs={12}>\n                    <ExperienceTimeline />\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}\n"],"names":["ProjectsDialog","props","ThemeProvider","theme","Dialog","maxWidth","onClose","handleClose","open","sx","backgorundColor","DialogTitle","variant","m","p","backgroundColor","color","activeProject","name","IconButton","onClick","position","right","top","Close","DialogContent","height","display","flexDirection","gap","children","TechStackBox","isMobile","useMediaQuery","technologies","showComplete","slice","renderIcon","techOption","useCustom","style","width","src","class","alt","label","loading","className","List","flexWrap","flexBasis","map","tech","i","ListItemIcon","marginTop","alignItems","borderRadius","padding","flexGrow","Icon","fontSize","overflow","ListItemText","ProjectsBox","t","useTranslation","useState","setActiveProject","isProjectModalOpen","setProjectModalOpen","Box","component","Typography","textAlign","SplitscreenOutlined","job","projects","project","Button","size","_evt","handleProjectModalOpen","flex","techStack","Grid","container","item","xs","sm","md","moment","startDate","format","endDate","multipleReleases","fontStyle","justifyContent","Replay30","description","dense","disablePadding","outcomes","outcome","ListItem","AssignmentTurnedIn","ResponsabilitiesBox","Assignment","responsabilities","task","TaskAltOutlined","ExperienceTimeline","Timeline","mywork","sDate","eDate","monthDuration","diff","yearDuration","TimelineItem","TimelineOppositeContent","fontWeight","TimelineSeparator","TimelineDot","icon","PersonOutline","LaptopMac","TimelineContent","py","px","AnimateWhenVisible","animation","Paper","borderColor","borderStyle","Engineering","Business","company","Workspaces","team","MyWork","Container","disableGutters","backgroundImage","stackedBG","backgroundSize"],"sourceRoot":""}