{"version":3,"file":"static/js/738.6d7d1ede.chunk.js","mappings":"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","sources":["components/dialogs/ProjectsDialog.tsx","components/experience/TechStackBox.tsx","components/experience/ProjectsBox.tsx","components/experience/ResponsabilitiesBox.tsx","components/ExperienceTimeline.tsx","pages/MyWork.tsx"],"sourcesContent":["import Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { ProjectsDialogProps } from '../../common/types';\nimport theme from '../../resources/theme/CustomTheme.d';\nimport ThemeProvider from '@mui/material/styles/ThemeProvider';\nimport layeredBG from '../../resources/img/layered-waves-haikei-top.webp';\n\nexport const ProjectsDialog = (props: ProjectsDialogProps) => {\n    return (\n        <ThemeProvider theme={theme}>\n            <Dialog\n                maxWidth=\"md\"\n                onClose={props.handleClose}\n                aria-labelledby=\"customized-dialog-title\"\n                open={props.open}\n                sx={{ \n                    backgorundColor: 'transparent'\n                }}\n            >\n                <DialogTitle\n                    variant=\"h6\"\n                    sx={{\n                        m: 0,\n                        p: 2,\n                        backgroundColor: 'secondary.main',\n                        color: 'white.main',\n                    }}\n                >\n                    {props.activeProject?.name ?? ''}\n                    <IconButton\n                        aria-label=\"close\"\n                        onClick={props.handleClose}\n                        sx={{\n                            position: 'absolute',\n                            right: 8,\n                            top: 8,\n                            color: theme.palette.grey[500]\n                        }}\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </DialogTitle>\n                <DialogContent\n                    sx={{ \n                        color: 'white.main',\n                        backgorundColor: 'transparent',\n                        height: '28rem',\n                        backgroundImage: `url(${layeredBG})`,\n                        backgroundSize: 'cover',\n                        backgroundRepeat: 'no-repeat',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        gap: '0.5rem'\n                    }}\n                >\n                    {props.children}\n                </DialogContent>\n            </Dialog>\n        </ThemeProvider>\n    );\n};\n","import List from '@mui/material/List/List';\nimport { TechStackBoxProps, TechStackOption } from '../../common/types';\nimport Icon from '@mui/material/Icon/Icon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport ThemeProvider from '@mui/material/styles/ThemeProvider';\nimport theme from '../../resources/theme/CustomTheme.d';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport useMediaQuery from '@mui/material/useMediaQuery/useMediaQuery';\n\nexport const TechStackBox = (props: TechStackBoxProps) => {\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    let technologies = props.technologies;\n    if (!props.showComplete){\n        technologies = [\n            ...props.technologies.slice(0, 5), \n            {\n                \"img\": 'more.svg',\n                \"label\": 'See others'\n            }\n        ];\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <List\n                sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: '1rem', flexBasis: 'auto' }}\n            >\n                {technologies.map((tech: TechStackOption, i: number) => {\n                    return (\n                        <ListItemIcon\n                            key={i}\n                            color=\"white\"\n                            aria-details={tech.label}\n                            sx={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                marginTop: '0',\n                                alignItems: 'center',\n                                backgroundColor: props.showComplete ? 'fadedAccent.main' : 'transparent',\n                                borderRadius: '4px',\n                                padding: '4px',\n                                flexGrow: '1'\n                            }}\n                        >\n                            <Icon sx={{fontSize: isMobile ?  '1.5rem' : '2.5rem', overflow: 'revert'}}>\n                                <img\n                                    style={{\n                                        width: '100%',\n                                        height: '100%',\n                                        color: 'white'\n                                    }}\n                                    src={`/tech/${tech.img}`}\n                                    alt={tech.label}\n                                    loading=\"lazy\"\n                                />\n                            </Icon>\n                            {\n                                props.showComplete ? \n                                    <ListItemText sx={{fontSize: isMobile ? '0.8rem' : 'inherit'}}>{tech.label}</ListItemText>\n                                    : null\n                            }\n                        </ListItemIcon>\n                    );\n                })}\n            </List>\n        </ThemeProvider>\n    );\n};\n","import Box from '@mui/material/Box/Box';\nimport Button from '@mui/material/Button/Button';\nimport Typography from '@mui/material/Typography/Typography';\nimport { useTranslation } from 'react-i18next';\nimport { JobProject, ProjectBoxProps } from '../../common/types';\nimport SplitscreenOutlinedIcon from '@mui/icons-material/SplitscreenOutlined';\nimport { useState } from 'react';\nimport { ProjectsDialog } from '../dialogs/ProjectsDialog';\nimport moment from 'moment';\nimport { TechStackBox } from './TechStackBox';\nimport Divider from '@mui/material/Divider/Divider';\nimport Replay30Icon from '@mui/icons-material/Replay30';\nimport useMediaQuery from '@mui/material/useMediaQuery/useMediaQuery';\nimport theme from '../../resources/theme/CustomTheme.d';\n\nexport const ProjectsBox = (props: ProjectBoxProps) => {\n    const { t } = useTranslation();\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const [activeProject, setActiveProject] = useState<JobProject>();\n    const [isProjectModalOpen, setProjectModalOpen] = useState<boolean>(false);\n\n    const handleProjectModalOpen = (project: JobProject) => {\n        setActiveProject(project);\n        setProjectModalOpen(true);\n    };\n\n    const handleProjectModalClose = (_evt: any) => {\n        setProjectModalOpen(false);\n    };\n\n    return (\n        <Box>\n            <Typography\n                variant=\"h6\"\n                textAlign=\"left\"\n                component=\"span\"\n                sx={{\n                    display: 'flex',\n                    gap: '0.8rem',\n                    alignItems: 'center',\n                }}\n            >\n                <SplitscreenOutlinedIcon />\n                {t('projects.title')}\n            </Typography>\n            <Box sx={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>\n                {props.job.projects.map((project: JobProject, i: number) => {\n                    return (\n                        <Button\n                            key={i}\n                            size=\"large\"\n                            variant=\"outlined\"\n                            color=\"white\"\n                            onClick={(_evt) => handleProjectModalOpen(project)}\n                            sx={{\n                                padding: '20px',\n                                marginTop: '20px',\n                                display: 'flex',\n                                flexDirection: 'column',\n                                flexWrap: 'wrap',\n                                flex: isMobile ? '100%' : '33%',\n                            }}\n                        >\n                            {project.name}\n\n                            <TechStackBox\n                                showComplete={false}\n                                technologies={project.techStack ?? []}\n                            />\n                        </Button>\n                    );\n                })}\n            </Box>\n            <ProjectsDialog\n                open={isProjectModalOpen}\n                activeProject={activeProject}\n                handleClose={handleProjectModalClose}\n            >\n                <Typography variant=\"overline\" textAlign={isMobile ? 'center' : 'inherit'}>\n                    <span>{`${moment(activeProject?.startDate).format(\n                        'MM/YYYY'\n                    )} - ${moment(activeProject?.endDate).format(\n                        'MM/YYYY'\n                    )}`}</span>\n                </Typography>\n                {\n                activeProject?.multipleReleases ?\n                        <Typography\n                            sx={{\n                                fontStyle: 'italic',\n                                alignItems: 'right',\n                                backgroundColor: 'fadedAccent.main',\n                                borderRadius: '5px',\n                                display: 'flex',\n                                justifyContent: 'center',\n                                flexDirection: 'row',\n                                gap: '1rem',\n                            }}\n                        >\n                            {t('projects.dialog.multipleReleasesLabel')}\n                            <Replay30Icon />\n                        </Typography>\n                        : null\n                }\n                <Divider />\n                <Typography variant=\"h6\" sx={{fontSize: isMobile ? '0.8rem' : 'inherit'}}>\n                    {t('projects.dialog.descriptionLabel')}\n                </Typography>\n                <Typography variant=\"body1\" sx={{fontSize: isMobile ? '0.8rem' : 'inherit'}}>\n                    {activeProject?.description ?? ''}\n                </Typography>\n                <Divider />\n                <Typography variant=\"h6\" sx={{fontSize: isMobile ? '0.8rem' : 'inherit'}}>\n                    {t('projects.dialog.outcomeLabel')}\n                </Typography>\n                <Typography variant=\"body1\" sx={{fontSize: isMobile ? '0.8rem' : 'inherit'}}>\n                    {activeProject?.outcome ?? ''}\n                </Typography>\n                <Divider />\n                <Typography variant=\"h6\" sx={{fontSize: isMobile ? '0.8rem' : 'inherit'}}>\n                    {t('projects.dialog.techStackLabel')}\n                </Typography>\n                <TechStackBox\n                    showComplete={true}\n                    technologies={activeProject?.techStack ?? []}\n                />\n            </ProjectsDialog>\n        </Box>\n    );\n};\n","import AssignmentIcon from '@mui/icons-material/Assignment';\nimport TaskAltOutlinedIcon from '@mui/icons-material/TaskAltOutlined';\nimport Box from \"@mui/material/Box/Box\";\nimport List from '@mui/material/List/List';\nimport ListItem from '@mui/material/ListItem/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText/ListItemText';\nimport Typography from \"@mui/material/Typography/Typography\";\nimport { useTranslation } from 'react-i18next';\nimport { ResponsabilitiesBoxProps } from '../../common/types';\n\nexport const ResponsabilitiesBox = (props: ResponsabilitiesBoxProps) => {\n    const { t } = useTranslation();\n\n    return (\n        <Box>\n            <Typography\n                textAlign=\"left\"\n                variant=\"h6\"\n                component=\"span\"\n                sx={{\n                    display: 'flex',\n                    gap: '0.8rem',\n                    alignItems: 'center',\n                }}\n            >\n                <AssignmentIcon color=\"white\" />\n                {t('mywork.journey.responsabilities')}\n            </Typography>\n            <Typography\n                variant=\"caption\"\n                component=\"span\"\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: '1rem',\n                    marginTop: '5px',\n                }}\n            >\n                <List dense={true}>\n                    {props.job.responsabilities.map((task: string, i: number) => {\n                        return (\n                            <ListItem key={i}>\n                                <ListItemIcon>\n                                    <TaskAltOutlinedIcon color=\"white\" />\n                                </ListItemIcon>\n                                <ListItemText>{task}</ListItemText>\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            </Typography>\n        </Box>\n    );\n};\n","import Timeline from '@mui/lab/Timeline/Timeline';\nimport TimelineItem from '@mui/lab/TimelineItem/TimelineItem';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator/TimelineSeparator';\nimport TimelineContent from '@mui/lab/TimelineContent/TimelineContent';\nimport TimelineOppositeContent from '@mui/lab/TimelineOppositeContent/TimelineOppositeContent';\nimport TimelineDot from '@mui/lab/TimelineDot/TimelineDot';\nimport EngineeringIcon from '@mui/icons-material/Engineering';\nimport LaptopMacIcon from '@mui/icons-material/LaptopMac';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport WorkspacesIcon from '@mui/icons-material/Workspaces';\nimport Typography from '@mui/material/Typography';\nimport mywork from '../config/mywork.json';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport Box from '@mui/material/Box/Box';\nimport theme from '../resources/theme/CustomTheme.d';\nimport Paper from '@mui/material/Paper/Paper';\nimport { AnimateWhenVisible } from './animations/AnimateWhenVisible';\nimport { ProjectsBox } from './experience/ProjectsBox';\nimport { Job } from '../common/types';\nimport { ResponsabilitiesBox } from './experience/ResponsabilitiesBox';\nimport useMediaQuery from '@mui/material/useMediaQuery/useMediaQuery';\n\nexport default function ExperienceTimeline() {\n    const { t } = useTranslation();\n    const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n\n    return (\n        <Timeline position={isMobile ? 'right' : 'alternate'}>\n            <Typography sx={{ textAlign: 'center' }} variant=\"h5\">\n                {t('mywork.journey.title')}\n            </Typography>\n            <Box m={2}>\n                {mywork.work.map((job: Job, i: number) => {\n                    const sDate = moment(job.startDate);\n                    const eDate = moment(job.endDate);\n                    const monthDuration = eDate.diff(sDate, 'months') % 12;\n                    const yearDuration = eDate.diff(sDate, 'years');\n\n                    return (\n                        <TimelineItem \n                          key={i}\n                          sx={{ \n                            flexDirection: isMobile ? 'column' : 'inherit',\n                            alignItems: isMobile ? 'center' : 'inherit' \n                          }}\n                        >\n                            <TimelineOppositeContent\n                                sx={{\n                                    m: 'auto 0',\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    fontWeight: '600'\n                                }}\n                                variant=\"h6\"\n                                color=\"text.secondary\"\n                            >\n                                  <span>{`${sDate.format(\n                                      'MM/YYYY'\n                                  )} - ${eDate.format('MM/YYYY')}`}</span>\n                                  <span>{`(~${yearDuration} years ${monthDuration} Months)`}</span>\n                            </TimelineOppositeContent>\n                            <TimelineSeparator>\n                                <TimelineDot\n                                    color=\"primary\"\n                                    sx={{ borderRadius: '2px' }}\n                                >\n                                    {job.icon === 'leadership' ? (\n                                        <PersonOutlineIcon />\n                                    ) : (\n                                        <LaptopMacIcon />\n                                    )}\n                                </TimelineDot>\n                            </TimelineSeparator>\n                            <TimelineContent\n                                sx={{\n                                    py: '12px',\n                                    px: 2\n                                }}\n                            >\n                                <AnimateWhenVisible animation=\"fadeTop\">\n                                    <Paper\n                                        sx={{\n                                            padding: '30px',\n                                            backgroundColor: '#596F62',\n                                            color: theme.palette.white.main,\n                                            borderColor: 'secondary',\n                                            borderStyle: 'solid',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            gap: '1rem'\n                                        }}\n                                    >\n                                        <Typography\n                                            textAlign=\"left\"\n                                            variant=\"h5\"\n                                            component=\"span\"\n                                            sx={{\n                                                display: 'flex',\n                                                gap: '0.8rem',\n                                                alignItems: 'center',\n                                            }}\n                                        >\n                                            <EngineeringIcon color=\"white\" />\n                                            {job.position}\n                                        </Typography>\n                                        <Typography\n                                            textAlign=\"left\"\n                                            variant=\"body2\"\n                                            component=\"span\"\n                                            sx={{\n                                                display: 'flex',\n                                                gap: '0.8rem',\n                                                alignItems: 'center',\n                                            }}\n                                        >\n                                            <BusinessIcon color=\"white\" />\n                                            {job.company}\n                                        </Typography>\n                                        <Typography\n                                            textAlign=\"left\"\n                                            variant=\"body2\"\n                                            component=\"span\"\n                                            sx={{\n                                                display: 'flex',\n                                                gap: '0.8rem',\n                                                alignItems: 'center',\n                                            }}\n                                        >\n                                            <WorkspacesIcon color=\"white\" />\n                                            {`${t('mywork.journey.team')}: ${\n                                                job.team\n                                            }`}\n                                        </Typography>\n                                        <ResponsabilitiesBox job={job} />\n                                        <ProjectsBox job={job} />\n                                    </Paper>\n                                </AnimateWhenVisible>\n                            </TimelineContent>\n                        </TimelineItem>\n                    );\n                })}\n            </Box>\n        </Timeline>\n    );\n}\n","import Container from \"@mui/material/Container/Container\";\nimport Grid from \"@mui/material/Grid/Grid\";\nimport ExperienceTimeline from \"../components/ExperienceTimeline\";\nimport stackedBG from '../resources/img/stacked-waves-haikei.webp';\n\nexport default function MyWork() {\n    return(\n        <Container disableGutters maxWidth={false} sx={{backgroundImage: `url(${stackedBG})`, backgroundSize: 'cover'}}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <ExperienceTimeline />\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}"],"names":["ProjectsDialog","props","ThemeProvider","theme","Dialog","maxWidth","onClose","handleClose","open","sx","backgorundColor","DialogTitle","variant","m","p","backgroundColor","color","activeProject","name","IconButton","onClick","position","right","top","Close","DialogContent","height","backgroundImage","layeredBG","backgroundSize","backgroundRepeat","display","flexDirection","gap","children","TechStackBox","isMobile","useMediaQuery","technologies","showComplete","slice","List","flexWrap","flexBasis","map","tech","i","ListItemIcon","label","marginTop","alignItems","borderRadius","padding","flexGrow","Icon","fontSize","overflow","style","width","src","img","alt","loading","ListItemText","ProjectsBox","t","useTranslation","useState","setActiveProject","isProjectModalOpen","setProjectModalOpen","Box","Typography","textAlign","component","SplitscreenOutlined","job","projects","project","Button","size","_evt","handleProjectModalOpen","flex","techStack","moment","startDate","format","endDate","multipleReleases","fontStyle","justifyContent","Replay30","Divider","description","outcome","ResponsabilitiesBox","Assignment","dense","responsabilities","task","ListItem","TaskAltOutlined","ExperienceTimeline","Timeline","mywork","sDate","eDate","monthDuration","diff","yearDuration","TimelineItem","TimelineOppositeContent","fontWeight","TimelineSeparator","TimelineDot","icon","PersonOutline","LaptopMac","TimelineContent","py","px","AnimateWhenVisible","animation","Paper","borderColor","borderStyle","Engineering","Business","company","Workspaces","team","MyWork","Container","disableGutters","stackedBG","Grid","container","item","xs"],"sourceRoot":""}